#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'foxhole'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/foxhole now"
  exit 64
end

include GLI::App

program_desc "Backup and restore Firefox's sessionstore, so that you can recover your tab groups (panoramas) after a crash."

version Foxhole::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'verbose'
switch [:v, :verbose]

desc 'Backup the current sessionstore'
arg_name '' # backup take no particular args
command :backup do |c|

  c.desc 'Give the current sessionstore a special name. You can restore it by using restore -n'
  c.arg_name 'Name'
  c.flag [:n, :name]

  c.action do |global_options,options,args|

    Foxhole.logger.level = Logger::INFO unless global_options[:v]
    Foxhole.logger.debug(options)

    Foxhole.backup(options)

    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "backup command ran"
  end
end

desc 'Restore the most recent sessionstore'
arg_name '' # restore has no particular args
command :restore do |c|

  c.desc 'Restore the sessionstore with the given name, instead of the most recent sessionstore.'
  c.arg_name 'Name'
  c.flag [:n, :name]

  c.desc 'Restore the sessionstore from the given date. Restore by date is exclusive with restore by name.'
  c.arg_name 'Date'
  c.flag [:d, :date]

  c.desc 'Restore the sessionstore from the given hour. If a date or name is also specified, both hour and date will be used.'
  c.arg_name 'Hour'
  c.flag [:h, :hour]

  c.action do |global_options,options,args|

    Foxhole.restore(options)
    puts "restore command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
